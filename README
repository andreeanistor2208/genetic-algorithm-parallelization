Tema 1 APD 

Nistor Andreea Iuliana
333CB

	Pentru a realiza tema am urmarit si inteles solutia secventiala din schelet,
apoi am paralelizezat-o.

	Pentru ca functia de pornire a thread-urilor accepta doar un argument,
a trebuit sa imi construiesc o structura cu metadata (thread_metadata in care
pun tot ce ii era necesar unui thread sa isi faca treaba, evident
bariera si datele de lucru date doar prin pointer). A trebuit sa mut
declararea vectorilor in main (si eliberarea memoriei) pentru a le 
putea trimite fiecarui thread in parte.

	Am un vector mare cu metadata, iar fiecare thread are aproape toate 
campurile identice, difera doar id-ul, puteam evita aceasta risipa de memorie
daca eram lasati sa folosim o variabila globala si un mutex pentru ea, si 
threadurile si-ar fi generat singure la intrarea in functie un id.

	Am folosit un singur create si join cum era solicitat in enunt.

	Functia de run_genetic cred ca trebuia sparta in mai multe functii,
este f mare ca numar de linii de cod, iar pentru ca mai aveam de facut
inca odata sortarea si de 2 ori calculul valorilor de fitness clar
s-ar fi ajuns la acest lucru.

	Primul lucru facut in functia de run_genetic a fost sa extrag ce imi trebuie
din metadata, pentru a putea mentine mai usor o structura lizibila a codului,
similara cu ce era in schelet si in laboratoare.

	Am impartit calcularea primei generatii impartind indivizii la numarul
de threaduri, prin formula din laborator:
	start = thread_id * (double)N / P;
	end = fmin((thread_id + 1) * (double)N / P, N);
	Am folosit aceasta formula, cu mici variatii in tot programul cand
vorbim de impartirea unui numar de date la un numar de fire de executie.

	Pentru a paraleliza sortarea am folosit intai bubblesort ca la laborator,
insa bubblesort paralelizat a dat rezultate mai proaste decat varianta seriala,
bubblesort este un algoritm slab si in plus erau foarte multe etape cu bariere.
Asa ca am trecut la mergesort, deoarece quicksort are acea etapa cu pivotul
care nu permitea impartirea in jumatate eficienta a vectorilor.

	Pentru interclasarea rezultatelor am folosit initial numarul de vectori
rezultati egal cu numarul de threaduri, iar la fiecare pas injumatatesc
numarul lor, folosind cate un thread care sa interclaseze 2 vectori.
Daca avem la una din etape un numar impar de vectori, pun ultimul thread
sa mai faca o interclasare, intre primul rezultat cu dimensiune dubla si 
ultimul vector ramas. Pe masura ce numarul de vectori scade, iar
dimensiunea lor creste, vom folosi mai putine threaduri, pentru ca 
interclasarea nu vad cum s-ar putea paraleliza.

	Dupa sortarea am paralelizat etapele algoritmului, prima a fost de pastrare a 
primilor 30% dintre indivizi tot prin impartirea in intervale egale (sau aproape egale)
intre firele de executie. Intre fiecare etapa am folosit bariere.

	Pentru cele 2 etape de mutatii am folosit aceleasi intervale la impartire,
pentru ca este vorba de aceeasi primi 20%, iar rezultatele erau scrise
in zone diferite de memorie, deci nu am avut nevoie nici de bariera intre cele
doua etape.

	La crossover am folosit din nou impartirea pe intervaluri, dar a trebuit sa am
grija la ultimul element.

	Am observat o imbunatarire la marirea numarului de thread-uri atata timp
cat am core-uri care sa le suporte. Daca tot maream numarul de thread-uri
peste cel de core-uri programul ajungea sa ruleze mai incet, din cauza
partii de schedueling a threadurilor.

	Mai erau de facut: sa paralelizez si celalalt apel la qsort din afara
buclei pentru generatii, sa paralelizez si calculul functiei de fitness.
